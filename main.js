/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// main.ts
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var path = __toESM(require("path"));
function getVaultRoot(app) {
  let adapter = app.vault.adapter;
  if (adapter instanceof import_obsidian.FileSystemAdapter) {
    return adapter.getBasePath();
  }
  throw "Can't find the vault root path";
}
module.exports = class CombineDailyNotes extends import_obsidian.Plugin {
  async onload() {
    const vault_root = getVaultRoot(this.app);
    const config_dir = this.app.vault.configDir;
    const py_script = path.join(vault_root, config_dir, "plugins", "obsidian-combine-daily-notes", "combine.py");
    const output_dir = path.join(vault_root, "Weekly/");
    return (0, import_child_process.execFile)(
      py_script,
      [vault_root, output_dir, "clean"],
      (error, stdout, stderr) => {
        if (error) {
          new import_obsidian.Notice(stderr);
          throw error;
        }
      }
    );
  }
  async onunload() {
  }
};
